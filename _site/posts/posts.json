[
  {
    "path": "posts/2020-12-12-using-the-tidyverse-with-databases/",
    "title": "Using the tidyverse with Databases - Part I",
    "description": "You don't need to be a SQL expert to work with Databases through R",
    "author": [
      {
        "name": "Vebash Naidoo",
        "url": "https://twitter.com/Sciencificity"
      }
    ],
    "date": "2020-12-12",
    "categories": [
      "SQL",
      "databases",
      "tidyverse",
      "dbplyr"
    ],
    "contents": "\r\n\r\nContents\r\nBackground\r\nIntro to using Databases in R, with Tidyverse tools (Part I)Motivation\r\nConnecting to a DatabasePackages needed\r\nThe database we‚Äôll use\r\nConnecting to a SQLite DB\r\n\r\nTake a look aroundDBI Functions\r\ndplyr Functions\r\nHave a look at the SQL behind the scenes\r\nWhat‚Äôs with this lazy query / ?? we‚Äôre seeing?\r\n\r\nDone? Remember to disconnect!\r\n\r\nSlides\r\nStill to comeAcknowledgements\r\n\r\n\r\n\r\nBackground\r\nOn the 1st of December I certified as an RStudio Tidyverse Instructor. As part of the process I prepared a sample lesson that was delivered during the exam. In a series of posts I will go through an extension of that sample lesson.\r\nIntro to using Databases in R, with Tidyverse tools (Part I)\r\nMotivation\r\nYou often have data in a corporate or institutional database (often termed relational database management system, or RDBMS). The language to talk with such a database (DB) is some variant of the language SQL (Structured Query Language). I say some variant, since a vendor providing an RDBMS may adopt the standardised SQL, but they may also extend it with their own variations.\r\nIf you use different RDBMS‚Äôs from different vendors you need to understand how to query that DB using the particular SQL dialect used by that vendor. For example, we use PostgreSQL, and we also use PrestoDB (for Athena on AWS). JSON fields in the PostgreSQL DB are ingested as structured nested arrays in AWS and hence when querying the same field we use different query syntax.\r\nYou know R, especially the dplyr üì¶. Even though the dplyr üì¶ is so well written to mimic the SQL syntax - select(), group_by(), left_join() etc. there is still a cognitive load when you switch between using R syntax, and SQL syntax (ask me, who has often written == in SQL syntax on Athena only to wonder why I am getting an error ü§ê).\r\nYou only have so much memory in your local environment, and may want your RDBMS to do the heavy lifting (most of the computation), and only pull data into R when you need to (e.g.¬†pull in aggregated data to create plots for a report).\r\nIn this tutorial you will learn how to use dbplyr, which is a database back-end of dplyr, to execute queries directly in your RDBMS all the while writing R tidyverse syntax üòÆ ‚≠ê.\r\nConnecting to a Database\r\nPackages needed\r\nDBI: This is the main package which is a Database Interface for R.install.packages(\"DBI\")\r\ndbplyr: The üì¶ we may use to talk to our database, all the while using dplyr syntax in our code.install.packages(\"dbplyr\")\r\ndplyr: To select(), group_by() as well as ‚Äútalk‚Äù, via the connection we will establish, to a database table.\r\nRSQLite: DBI compliant package that allows a connection to a lightweight single user SQLite DB.install.packages(\"RSQLite\")\r\nOther DBI compliant R packages you may need for your use case - e.g.¬†RPostgres is for connecting to a PostgreSQL RDBMS. Note: Not used in this tutorial (brief overview in slides), and RStudio‚Äôs DB Website is a treasure trove of information üë©‚Äçüíª.\r\nodbc: This is a DBI compliant interface to allow you to interface to your RDBMS using an odbc driver.Note: Not used in this tutorial (brief overview in slides), and again RStudio‚Äôs DB Website has useful information in this regard too!install.packages(\"odbc\")\r\nThe database we‚Äôll use\r\nAlison Hill created a dataset for The Great British Bake Off. I used the data from her package to create a SQLite DB that we will use to practise on.\r\nConnecting to a SQLite DB\r\nFor the purposes of this tutorial we will connect to a SQLite DB that I created. To talk to the DB we need to first make a connection.\r\nLoad the DBI package: library(DBI)\r\nMake a connection: con <- dbConnect(RSQLite::SQLite(), \"mydb.db\")\r\n\r\n\r\nlibrary(DBI) # main DB interface\r\nlibrary(dplyr) \r\nlibrary(dbplyr) # dplyr back-end for DBs\r\n\r\ncon <- dbConnect(drv = RSQLite::SQLite(), # give me a SQLite connection\r\n        dbname = \"data/great_brit_bakeoff.db\") # To what? The DB named great_brit_bakeoff.db\r\nsummary(con) # What do we have? \r\n\r\n\r\n          Length            Class             Mode \r\n               1 SQLiteConnection               S4 \r\n\r\nOk, we have successfully managed to connect to the DB.\r\nTake a look around\r\nAlright, we‚Äôve made a connection now what? Let‚Äôs have a look around using some DBI functions.\r\nDBI Functions\r\n\r\n\r\ndbListTables(con) # List me the tables at the connection\r\n\r\n\r\n [1] \"baker_results\"     \"bakers\"            \"bakes\"            \r\n [4] \"challenge_results\" \"challenges\"        \"episode_results\"  \r\n [7] \"episodes\"          \"ratings\"           \"ratings_seasons\"  \r\n[10] \"results\"           \"seasons\"           \"series\"           \r\n\r\ndbListFields(con, # Reach into my connection and ...\r\n      \"bakers\")   # tell me what fields does the `bakers` table have?\r\n\r\n\r\n[1] \"series\"     \"baker_full\" \"age\"        \"occupation\" \"hometown\"  \r\n\r\nres <- dbSendQuery(con, \"SELECT * FROM bakers LIMIT 3\") # Execute a query\r\ndbFetch(res) # get the result\r\n\r\n\r\n  series          baker_full age                        occupation\r\n1      1       Annetha Mills  30                           Midwife\r\n2      1      David Chambers  31                      Entrepreneur\r\n3      1 Edward \"Edd\" Kimber  24 Debt collector for Yorkshire Bank\r\n       hometown\r\n1         Essex\r\n2 Milton Keynes\r\n3      Bradford\r\n\r\ndbClearResult(res) # clear the result\r\n\r\n\r\n\r\ndplyr Functions\r\nOk, let‚Äôs flex our dplyr skills üòÑ.\r\ntbl(con, \"name_of_table\") says using my connection ‚Äúcon‚Äù go execute a SELECT * FROM name_of_table.\r\n\r\n\r\ntbl(con, \"bakers\") # let's have a look - works like glimpse()\r\n\r\n\r\n# Source:   table<bakers> [?? x 5]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n   series baker_full          age occupation            hometown      \r\n    <dbl> <chr>             <dbl> <chr>                 <chr>         \r\n 1      1 \"Annetha Mills\"      30 Midwife               Essex         \r\n 2      1 \"David Chambers\"     31 Entrepreneur          Milton Keynes \r\n 3      1 \"Edward \\\"Edd\\\" ~    24 Debt collector for Y~ Bradford      \r\n 4      1 \"Jasminder Randh~    45 Assistant Credit Con~ Birmingham    \r\n 5      1 \"Jonathan Shephe~    25 Research Analyst      St Albans     \r\n 6      1 \"Lea Harris\"         51 Retired               Midlothian, S~\r\n 7      1 \"Louise Brimelow\"    44 Police Officer        Manchester    \r\n 8      1 \"Mark Whithers\"      48 Bus Driver            South Wales   \r\n 9      1 \"Miranda Gore Br~    37 Food buyer for Marks~ Midhurst, Wes~\r\n10      1 \"Ruth Clemens\"       31 Retail manager/House~ Poynton, Ches~\r\n# ... with more rows\r\n\r\ntbl(con, \"bakers\") %>% \r\n  head(3) # \"SELECT * FROM bakers LIMIT 3\"\r\n\r\n\r\n# Source:   lazy query [?? x 5]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n  series baker_full           age occupation               hometown   \r\n   <dbl> <chr>              <dbl> <chr>                    <chr>      \r\n1      1 \"Annetha Mills\"       30 Midwife                  Essex      \r\n2      1 \"David Chambers\"      31 Entrepreneur             Milton Key~\r\n3      1 \"Edward \\\"Edd\\\" K~    24 Debt collector for York~ Bradford   \r\n\r\nNotice that each time we used con. We use our connection con to ‚Äútalk‚Äù to our database, and we will use it throughout, even in our tidy pipelines.\r\nIn baker_results we have the baker with their details, as well as their standing in the series competition. Let‚Äôs say we wanted to know if the winners came from different areas in Britain, or from some areas in particular.\r\n\r\n\r\ndbListFields(con, \"baker_results\")\r\n\r\n\r\n [1] \"series\"                    \"baker_full\"               \r\n [3] \"baker\"                     \"age\"                      \r\n [5] \"occupation\"                \"hometown\"                 \r\n [7] \"baker_last\"                \"baker_first\"              \r\n [9] \"star_baker\"                \"technical_winner\"         \r\n[11] \"technical_top3\"            \"technical_bottom\"         \r\n[13] \"technical_highest\"         \"technical_lowest\"         \r\n[15] \"technical_median\"          \"series_winner\"            \r\n[17] \"series_runner_up\"          \"total_episodes_appeared\"  \r\n[19] \"first_date_appeared\"       \"last_date_appeared\"       \r\n[21] \"first_date_us\"             \"last_date_us\"             \r\n[23] \"percent_episodes_appeared\" \"percent_technical_top3\"   \r\n\r\ntbl(con, \"baker_results\") %>% \r\n  select(series, baker, hometown, series_winner) # normal dplyr select\r\n\r\n\r\n# Source:   lazy query [?? x 4]\r\n# Database: sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n   series baker     hometown              series_winner\r\n    <dbl> <chr>     <chr>                         <int>\r\n 1      1 Annetha   Essex                             0\r\n 2      1 David     Milton Keynes                     0\r\n 3      1 Edd       Bradford                          1\r\n 4      1 Jasminder Birmingham                        0\r\n 5      1 Jonathan  St Albans                         0\r\n 6      1 Lea       Midlothian, Scotland              0\r\n 7      1 Louise    Manchester                        0\r\n 8      1 Mark      South Wales                       0\r\n 9      1 Miranda   Midhurst, West Sussex             0\r\n10      1 Ruth      Poynton, Cheshire                 0\r\n# ... with more rows\r\n\r\nNotice how our dplyr select() has trimmed down the number of columns from 24 to 4.\r\nTime to see if our winning bakers hail from similar hometowns or not.\r\n\r\n\r\ntbl(con, \"baker_results\") %>% \r\n  select(series, baker, hometown, series_winner) %>% \r\n  filter(series_winner == 1) %>% # normal dplyr filter\r\n  count(hometown, sort = TRUE)   # normal dplyr count\r\n\r\n\r\n# Source:     lazy query [?? x 2]\r\n# Database:   sqlite 3.33.0\r\n#   [C:\\Personal\\Blog_Vebash\\_posts\\2020-12-12-using-the-tidyverse-with-databases\\data\\great_brit_bakeoff.db]\r\n# Ordered by: desc(n)\r\n  hometown                              n\r\n  <chr>                             <int>\r\n1 Wigan                                 1\r\n2 West Molesey, Surrey                  1\r\n3 Ongar, Essex                          1\r\n4 Market Harborough, Leicestershire     1\r\n5 Leeds / Luton                         1\r\n6 Bradford                              1\r\n7 Barton-Upon-Humber, Lincolnshire      1\r\n8 Barton-Le-Clay, Bedfordshire          1\r\n\r\nLooks like our winners are from very different areas.\r\nHave a look at the SQL behind the scenes\r\nOur dplyr syntax is converted behind the scenes to SQL which is executed directly on the DB table.\r\n\r\n\r\ntbl(con, \"baker_results\") %>% \r\n  select(series, baker, hometown, series_winner) %>% \r\n  filter(series_winner == 1) %>% \r\n  count(hometown, sort = TRUE) %>% \r\n  show_query()\r\n\r\n\r\n<SQL>\r\nSELECT `hometown`, COUNT(*) AS `n`\r\nFROM (SELECT `series`, `baker`, `hometown`, `series_winner`\r\nFROM `baker_results`)\r\nWHERE (`series_winner` = 1.0)\r\nGROUP BY `hometown`\r\nORDER BY `n` DESC\r\n\r\nThat‚Äôs pretty nifty, and helps you learn SQL in the process - it is always good to know, and read SQL, which is used extensively in work and institutional environments.\r\nWhat‚Äôs with this lazy query / ?? we‚Äôre seeing?\r\nYou might have noticed that our pipelines have a:\r\nSource: table [?? x 5] OR\r\nSource: lazy query [?? x 4]\r\nin the output results.\r\nWhy is this?\r\nBehind the scenes the dplyr code we write, gets converted to SQL (the particular dialect of the DB we‚Äôre connecting to).\r\nThe SQL is executed directly on the DB. I.e. the data is not first brought into R and manipulated in R. Instead we send the query to the DB, and the DB does the computation.\r\nWhen we use a dplyr pipeline to execute a query on the DB, the DB does the computation and sends us back a glimpse of the executed end result.\r\nIt is for this reason, we see the ?? - we‚Äôre being told ‚ÄúHey, I executed this query (your pipeline converted to SQL) on the DB at connection con, and here‚Äôs a snippet of the output, but I did not get the meta-info on how many rows were produced, I just know that I got x_number of columns in the output.‚Äù\r\nWe will see in the next part of the tutorial how to get the info into R, and understand how many rows were produced etc.\r\nDone? Remember to disconnect!\r\nGood housekeeping means always remembering to disconnect once you‚Äôre done.\r\n\r\n\r\ndbDisconnect(con) # closes our DB connection\r\n\r\n\r\n\r\nTo see that is indeed the case let‚Äôs see if we can use the connection further ‚Ä¶\r\n\r\n\r\ndbListTables(con)\r\n\r\n\r\nError: Invalid or closed connection\r\n\r\nSlides\r\nIf you‚Äôd like to dive in please check out the slides, and the project on GitHub.\r\n\r\n\r\n\r\n\r\n\r\n\r\nfitvids('.shareagain', {players: 'iframe'});\r\n\r\nStill to come\r\nMore dplyr, for example joining tables.\r\nGetting the data into R.\r\nAcknowledgements\r\nSlide inspiration, as well as some of the background pictures are from Dr.¬†Alison Hill.\r\nThe Great British Bake Off data from Dr.¬†Alison Hill.\r\nEdgar Ruiz‚Äôs database work, and teachings.\r\n\r\n\r\n\r\n",
    "preview": "posts/2020-12-12-using-the-tidyverse-with-databases/data2-unsplash.jpg",
    "last_modified": "2020-12-15T00:46:20+02:00",
    "input_file": {}
  }
]
